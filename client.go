//  code generated by base sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package lark

import (
	"context"
	"net/http"
	"time"

	"github.com/larksuite/base-sdk-go/v3/core"
	"github.com/larksuite/base-sdk-go/v3/service/base/v1"
	"github.com/larksuite/base-sdk-go/v3/service/drive/v1"
)

type Client struct {
	config *larkcore.Config
	Base   *larkbase.BaseService   // 云文档-多维表格
	Drive  *larkdrive.DriveService // 云文档-文件管理
}

type ClientOptionFunc func(config *larkcore.Config)

func WithLogger(logger larkcore.Logger) ClientOptionFunc {
	return func(config *larkcore.Config) {
		config.Logger = logger
	}
}

func WithOpenBaseUrl(baseUrl string) ClientOptionFunc {
	return func(config *larkcore.Config) {
		config.BaseUrl = baseUrl
	}
}

func WithLogLevel(logLevel larkcore.LogLevel) ClientOptionFunc {
	return func(config *larkcore.Config) {
		config.LogLevel = logLevel
	}
}

func WithLogReqAtDebug(printReqRespLog bool) ClientOptionFunc {
	return func(config *larkcore.Config) {
		config.LogReqAtDebug = printReqRespLog
	}
}

func WithHttpClient(httpClient larkcore.HttpClient) ClientOptionFunc {
	return func(config *larkcore.Config) {
		config.HttpClient = httpClient
	}
}

func WithSerialization(serializable larkcore.Serializable) ClientOptionFunc {
	return func(config *larkcore.Config) {
		config.Serializable = serializable
	}
}

func WithReqTimeout(reqTimeout time.Duration) ClientOptionFunc {
	return func(config *larkcore.Config) {
		config.ReqTimeout = reqTimeout
	}
}

// 设置每次请求都会携带的 header
func WithHeaders(header http.Header) ClientOptionFunc {
	return func(config *larkcore.Config) {
		config.Header = header
	}
}

func NewClient(personalBaseToken string, appToken string, options ...ClientOptionFunc) *Client {
	// 构建配置
	config := &larkcore.Config{
		BaseUrl:           FeishuBaseUrl,
		PersonalBaseToken: personalBaseToken,
		AppToken:          appToken,
	}
	for _, option := range options {
		option(config)
	}

	// 构建日志器
	larkcore.NewLogger(config)

	// 创建序列化器
	larkcore.NewSerialization(config)

	// 创建httpclient
	larkcore.NewHttpClient(config)

	// 创建sdk-client，并初始化服务
	client := &Client{config: config}
	initService(client, config)

	return client
}

func initService(client *Client, config *larkcore.Config) {
	client.Base = larkbase.NewService(config)
	client.Drive = larkdrive.NewService(config)
}

func (cli *Client) Post(ctx context.Context, httpPath string, body interface{}, accessTokeType larkcore.AccessTokenType, options ...larkcore.RequestOptionFunc) (*larkcore.ApiResp, error) {
	return cli.Do(ctx, &larkcore.ApiReq{
		HttpMethod:                http.MethodPost,
		ApiPath:                   httpPath,
		Body:                      body,
		SupportedAccessTokenTypes: []larkcore.AccessTokenType{accessTokeType},
	}, options...)
}

func (cli *Client) Do(ctx context.Context, apiReq *larkcore.ApiReq, options ...larkcore.RequestOptionFunc) (*larkcore.ApiResp, error) {
	return larkcore.Request(ctx, apiReq, cli.config, options...)
}
func (cli *Client) Get(ctx context.Context, httpPath string, body interface{}, accessTokeType larkcore.AccessTokenType, options ...larkcore.RequestOptionFunc) (*larkcore.ApiResp, error) {
	return cli.Do(ctx, &larkcore.ApiReq{
		HttpMethod:                http.MethodGet,
		ApiPath:                   httpPath,
		Body:                      body,
		SupportedAccessTokenTypes: []larkcore.AccessTokenType{accessTokeType},
	}, options...)
}

func (cli *Client) Delete(ctx context.Context, httpPath string, body interface{}, accessTokeType larkcore.AccessTokenType, options ...larkcore.RequestOptionFunc) (*larkcore.ApiResp, error) {
	return cli.Do(ctx, &larkcore.ApiReq{
		HttpMethod:                http.MethodDelete,
		ApiPath:                   httpPath,
		Body:                      body,
		SupportedAccessTokenTypes: []larkcore.AccessTokenType{accessTokeType},
	}, options...)
}

func (cli *Client) Put(ctx context.Context, httpPath string, body interface{}, accessTokeType larkcore.AccessTokenType, options ...larkcore.RequestOptionFunc) (*larkcore.ApiResp, error) {
	return cli.Do(ctx, &larkcore.ApiReq{
		HttpMethod:                http.MethodPut,
		ApiPath:                   httpPath,
		Body:                      body,
		SupportedAccessTokenTypes: []larkcore.AccessTokenType{accessTokeType},
	}, options...)
}

func (cli *Client) Patch(ctx context.Context, httpPath string, body interface{}, accessTokeType larkcore.AccessTokenType, options ...larkcore.RequestOptionFunc) (*larkcore.ApiResp, error) {
	return cli.Do(ctx, &larkcore.ApiReq{
		HttpMethod:                http.MethodPatch,
		ApiPath:                   httpPath,
		Body:                      body,
		SupportedAccessTokenTypes: []larkcore.AccessTokenType{accessTokeType},
	}, options...)
}

var FeishuBaseUrl = "https://base-api.feishu.cn"
var LarkBaseUrl = "https://base-api.larksuite.com"
